//get size of heap allocation
.decl get_size_of_heap_alloc(instructionid: _instructionid, size: number)
get_size_of_heap_alloc(IID, SIZE) :- is_heap_allocation_call(IID), is_malloc_call_instruction(IID), get_size_of_malloc(IID, SIZE).
get_size_of_heap_alloc(IID, SIZE) :- is_heap_allocation_call(IID), is_calloc_call_instruction(IID), get_size_of_calloc(IID, SIZE).
get_size_of_heap_alloc(IID, SIZE) :- is_heap_allocation_call(IID), is_realloc_call_instruction(IID), get_size_of_realloc(IID, SIZE).


//get size of malloc
//TODO: rewrite as hardcoded and vreg can no be implemented in one rule
.decl get_size_of_malloc(instructionid: _instructionid, size: number)
//case hard coded size
get_size_of_malloc(IID, SIZE) :- is_malloc_call_instruction(IID),
get_first_operand(IID, OV1),
is_numeric(OV1),
SIZE = to_number(OV1).
//case get size by vreg
get_size_of_malloc(IID, SIZE) :- is_malloc_call_instruction(IID),
get_first_operand(IID, OV1),
block(FID, BID, _), instruction(BID, IID, _, _),
is_vreg(OV1),
get_int_by_vreg(SIZE, FID, OV1).

//get size of calloc
//TODO: rewrite as hardcoded and vreg can no be implemented in one rule
//case both hardcoded
.decl get_size_of_calloc(instructionid: _instructionid, size: number)
get_size_of_calloc(IID, SIZE) :- is_calloc_call_instruction(IID),
get_first_operand(IID, OV1), get_second_operand(IID, OV2),
is_numeric(OV1), is_numeric(OV2),
SIZE = to_number(OV1)*to_number(OV2).
//case vreg, hardcoded
get_size_of_calloc(IID, SIZE) :- is_calloc_call_instruction(IID),
get_first_operand(IID, OV1), get_second_operand(IID, OV2),
block(FID, BID, _), instruction(BID, IID, _, _),
get_int_by_vreg(SIZE1, FID, OV1),
is_vreg(OV1), is_numeric(OV2),
SIZE2 = to_number(OV2), 
SIZE = SIZE1*SIZE2.
//case hardcoded, vreg
get_size_of_calloc(IID, SIZE) :- is_calloc_call_instruction(IID),
get_first_operand(IID, OV1), get_second_operand(IID, OV2),
block(FID, BID, _), instruction(BID, IID, _, _),
get_int_by_vreg(SIZE2, FID, OV2),
is_numeric(OV1), is_vreg(OV2),
SIZE1 = to_number(OV1),
SIZE = SIZE1*SIZE2.
//case both hardcoded
get_size_of_calloc(IID, SIZE) :- is_calloc_call_instruction(IID),
get_first_operand(IID, OV1), get_second_operand(IID, OV2),
block(FID, BID, _), instruction(BID, IID, _, _),
get_int_by_vreg(SIZE1, FID, OV1),
get_int_by_vreg(SIZE2, FID, OV2),
is_vreg(OV1), is_vreg(OV2),
SIZE = SIZE1*SIZE2.

//get size of realloc
//TODO: rewrite as hardcoded and vreg can now be implemented in one rule

//case hard coded size
.decl get_size_of_realloc(instructionid: _instructionid, size: number)
get_size_of_realloc(IID, SIZE) :- is_realloc_call_instruction(IID),
get_second_operand(IID, OV2), 
is_numeric(OV2),
SIZE = to_number(OV2).

//case get size by vreg
get_size_of_realloc(IID, SIZE) :- is_realloc_call_instruction(IID),
get_second_operand(IID, OV2), 
is_vreg(OV2),
block(FID, BID, _), instruction(BID, IID, _, _),
get_int_by_vreg(SIZE, FID, OV2).


//get size of buffer by virtual register
.decl get_buffsize_by_vreg(size: number, functionid: _functionid, _vreg: symbol)
.output get_buffsize_by_vreg(delimiter=",")

//case alloca (end recursion)
get_buffsize_by_vreg(VAL, FID, VREG) :- block(FID, BID, _), instruction(BID, IID, VREG, OPC), OPC = "alloca",
get_size_of_alloca(IID, VAL), get_first_operand(IID, ALLOCATYPE),
!is_pointer(ALLOCATYPE).

//case getelementptr
get_buffsize_by_vreg(VAL, FID, VREG) :- block(FID, BID, _), instruction(BID, IID, VREG, OPC), OPC = "getelementptr", 
get_first_operand(IID, OV1), get_buffsize_by_vreg(VAL, FID, OV1).

//case memequals
get_buffsize_by_vreg(VAL, FID, VREG) :- block(FID, BID, _), instruction(BID, _, VREG, _),
memequals(FID, START_LOC, END_FID, END_LOC), 
START_LOC = VREG,
get_buffsize_by_vreg(VAL, END_FID, END_LOC).

//case heap allocation
get_buffsize_by_vreg(VAL, FID, VREG) :- block(FID, BID, _), instruction(BID, IID, VREG, _), 
is_heap_allocation_call(IID), get_size_of_heap_alloc(IID, SIZE),
VAL = SIZE.

//case unlimited direct user input (maximum length)
get_buffsize_by_vreg(VAL, FID, VREG) :-
memlocation(FID, VREG, TYPE, _),
CAT = cat("userinput_",to_string(MAXINT)),
is_memloc_with_direct_userinput(FID, VREG, CAT),
is_pointer(TYPE),
VAL = MAXINT.

//case direct user input (minimum length => limited or unlimited may have a length of 0)
get_buffsize_by_vreg(VAL, FID, VREG) :-
memlocation(FID, VREG, TYPE, _),
is_memloc_with_direct_userinput(FID, VREG, _),
is_pointer(TYPE),
VAL = 0.

//case global
get_buffsize_by_vreg(VAL, FID, VREG) :-
is_global(VREG),
global(VREG, _, _, VAL, _),
function(FID, _, _, _)
.


//get possible integer values
.decl get_int_by_vreg(value: number, functionid: _functionid, _vreg: symbol)
//.output get_int_by_vreg(delimiter=",")
//case add
get_int_by_vreg(VAL, FID, VREG) :- block(FID, BID, _), instruction(BID, IID, VREG, OPC), OPC = "add",
get_first_operand(IID, OV1), get_third_operand(IID, OV2), 
VAL=TMP+to_number(OV2), get_int_by_vreg(TMP, FID, OV1).

//case sub
get_int_by_vreg(VAL, FID, VREG) :- block(FID, BID, _), instruction(BID, IID, VREG, OPC), OPC = "sub",
get_first_operand(IID, OV1), get_third_operand(IID, OV2), 
VAL=TMP-to_number(OV2), get_int_by_vreg(TMP, FID, OV1).

//case call strlen
get_int_by_vreg(VAL, FID, VREG) :- block(FID, BID, _), instruction(BID, IID, VREG, OPC), OPC = "call",
get_first_operand(IID, OV1), is_strlen_call_instruction(IID),
get_buffsize_by_vreg(VAL, FID, OV1).

//case memequals
get_int_by_vreg(VAL, FID, VREG) :- block(FID, BID, _), instruction(BID, _, VREG, _),
memequals(FID, START_LOC, FID, END_LOC), 
START_LOC = VREG,
get_int_by_vreg(VAL, FID, END_LOC).

//case phi instruction
get_int_by_vreg(VAL, FID, VREG) :-
block(FID, BID, _),
instruction(BID, IID, VREG, "phi"),
is_even(I),
get_ith_operand(IID, I, LOC2),
get_num_operands(IID, OPCOUNT),
I<=OPCOUNT,
!is_vreg(LOC2),
is_numeric(LOC2),
VAL = to_number(LOC2)
.

//case is int
get_int_by_vreg(VAL, FID, VREG) :- 
is_numeric(VREG),
VAL = to_number(VREG), block(FID, _, _).


//case store integer
get_int_by_vreg(VAL, FID, VREG) :- 
block(FID, BID, _), 
instruction(BID, IID, _, OPC), OPC = "store",
get_second_operand(IID, NEWINT), 
get_fourth_operand(IID, VREG), 
get_int_by_vreg(VAL, FID, NEWINT)
.

//TODO: case load integer


//get str global values
.decl get_global_str_value(value: symbol, global: symbol)
//.output get_global_str_value
get_global_str_value(VAL, GLOB) :-
is_global_str(GLOB),
global(GLOB, _, _, _, VAL)
.