//maximum depth of value analysis
#define VA_MAXDEPTH 10

//get possible integer values (wrapper, which supports constants as vreg)
.decl get_int_by_vreg(value: number, functionid: _functionid, _vreg: symbol)
.output get_int_by_vreg(delimiter=",")

//case initializing wrapper
get_int_by_vreg(VAL, FID, VREG) :-
get_int_by_vreg_internal(VAL, FID, VREG, 1).


//get possible integer values
.decl get_int_by_vreg_internal(value: number, functionid: _functionid, _vreg: symbol, depth: number)

//case is int
get_int_by_vreg_internal(VAL, FID, VREG, DEPTH) :-
anumber(DEPTH), 
is_numeric(VREG),
VAL = to_number(VREG), block(FID, _, _).

//case add
get_int_by_vreg_internal(VAL, FID, VREG, DEPTH) :- 
anumber(DEPTH),
block(FID, BID, _), instruction(BID, IID, VREG, OPC), OPC = "add",
get_first_operand(IID, OV1), get_second_operand(IID, OV2),
is_numeric(OV2),
!is_numeric(VREG),
!is_numeric(OV1),
DEPTH < VA_MAXDEPTH, 
VAL=TMP+to_number(OV2), get_int_by_vreg_internal(TMP, FID, OV1, DEPTH+1).

//case mul
get_int_by_vreg_internal(VAL, FID, VREG, DEPTH) :- 
anumber(DEPTH),
block(FID, BID, _), instruction(BID, IID, VREG, OPC), OPC = "mul",
get_first_operand(IID, OV1), get_second_operand(IID, OV2),
is_numeric(OV2),
!is_numeric(VREG),
!is_numeric(OV1), 
DEPTH < VA_MAXDEPTH, 
VAL=TMP*to_number(OV2), get_int_by_vreg_internal(TMP, FID, OV1, DEPTH+1).


//case sub (sub number from vreg)
get_int_by_vreg_internal(VAL, FID, VREG, DEPTH) :- 
anumber(DEPTH),
block(FID, BID, _), instruction(BID, IID, VREG, OPC), OPC = "sub",
get_first_operand(IID, OV1), get_second_operand(IID, OV2),
is_numeric(OV2), 
DEPTH < VA_MAXDEPTH,  
VAL=TMP-to_number(OV2), get_int_by_vreg_internal(TMP, FID, OV1, DEPTH+1).

//case sub2 (sub vreg from number)
get_int_by_vreg_internal(VAL, FID, VREG, DEPTH) :-
anumber(DEPTH), 
block(FID, BID, _), instruction(BID, IID, VREG, OPC), OPC = "sub",
get_first_operand(IID, OV1), get_second_operand(IID, OV2),
is_numeric(OV1),  
VAL=to_number(OV1)-TMP, 
DEPTH < VA_MAXDEPTH, 
get_int_by_vreg_internal(TMP, FID, OV2, DEPTH+1).

//case call strlen (Maximum)
get_int_by_vreg_internal(VAL, FID, VREG, DEPTH) :- 
anumber(DEPTH),
block(FID, BID, _), instruction(BID, IID, VREG, OPC), OPC = "call",
get_first_operand(IID, OV1), is_strlen_call_instruction(IID),
get_buffsize_by_vreg(VAL2, FID, OV1),
VAL = VAL2-1,
VAL>0
.

//case call strlen (TODO: Minimum with userinput (only) can be 0)
get_int_by_vreg_internal(VAL, FID, VREG, DEPTH) :- 
anumber(DEPTH),
block(FID, BID, _), instruction(BID, IID, VREG, OPC), OPC = "call",
is_strlen_call_instruction(IID),
VAL = 0.

//case call atoi (max)
get_int_by_vreg_internal(VAL, FID, VREG, DEPTH) :- 
anumber(DEPTH),
block(FID, BID, _), instruction(BID, IID, VREG, OPC), OPC = "call",
get_last_operand(IID, "atoi"), get_first_operand(IID, BUFFVREG),
get_buffsize_by_vreg(THEORETICALBUFFSIZE, FID, BUFFVREG),
BUFFSIZE = THEORETICALBUFFSIZE-1,
x_nines(MAX, BUFFSIZE),
VAL = to_number(MAX)
.

//case call atoi (min)
get_int_by_vreg_internal(VAL, FID, VREG, DEPTH) :- 
anumber(DEPTH),
block(FID, BID, _), instruction(BID, IID, VREG, OPC), OPC = "call",
get_last_operand(IID, "atoi"), get_first_operand(IID, BUFFVREG),
get_buffsize_by_vreg(THEORETICALBUFFSIZE, FID, BUFFVREG),
BUFFSIZE = THEORETICALBUFFSIZE-1,
BUFFSIZE > 1,
x_nines(MIN, BUFFSIZE-1),
MINSTR = cat("-", MIN),
VAL = to_number(MINSTR)
.

//case rand max
get_int_by_vreg_internal(VAL, FID, VREG, DEPTH) :- 
block(FID, BID, _), instruction(BID, IID, VREG, OPC), OPC = "call",
anumber(DEPTH),
get_last_operand(IID, "rand"),
VAL = 32767.

//case rand min
get_int_by_vreg_internal(VAL, FID, VREG, DEPTH) :- 
block(FID, BID, _), instruction(BID, IID, VREG, OPC), OPC = "call",
anumber(DEPTH),
get_last_operand(IID, "rand"),
VAL = 0.


//case memequals
get_int_by_vreg_internal(VAL, FID, VREG, DEPTH) :- block(FID, BID, _), instruction(BID, _, VREG, _),
anumber(DEPTH),
memequals(FID, START_LOC, FID, END_LOC), 
START_LOC = VREG,
DEPTH < VA_MAXDEPTH, 
get_int_by_vreg_internal(VAL, FID, END_LOC, DEPTH+1).

//case phi instruction
get_int_by_vreg_internal(VAL, FID, VREG, DEPTH) :-
anumber(DEPTH),
block(FID, BID, _),
instruction(BID, IID, VREG, "phi"),
is_even(I),
get_ith_operand(IID, I, LOC2),
get_num_operands(IID, OPCOUNT),
I<=OPCOUNT,
!is_vreg(LOC2),
is_numeric(LOC2),
VAL = to_number(LOC2)
.


//case store integer
get_int_by_vreg_internal(VAL, FID, VREG, DEPTH) :- 
anumber(DEPTH),
block(FID, BID, _), 
instruction(BID, IID, _, OPC), OPC = "store",
get_first_operand(IID, TYPE),
is_inttype(TYPE), 
get_second_operand(IID, NEWINT), 
get_fourth_operand(IID, VREG),
is_numeric(NEWINT),
NEWINT != "0", 
VAL = to_number(NEWINT)
.

//case load integer
//TODO: check if type check is necessary (?)
get_int_by_vreg_internal(VAL, FID, VREG, DEPTH) :- 
anumber(DEPTH),
block(FID, BID, _), 
instruction(BID, IID, VREG, OPC), OPC = "load",
get_first_operand(IID, TYPE),
!is_pointer(TYPE),
get_third_operand(IID, NEWINT), 
DEPTH < VA_MAXDEPTH, 
get_int_by_vreg_internal(VAL, FID, NEWINT, DEPTH+1)
.