//memtype e.g. i8*
.decl memtype(memtype: symbol)
memtype(MEM) :- MEM = "unknown". //unkown type
memtype(MEM) :- type(MEM).

//memcategory
.decl memcategory(memcategory: _memcategory)
memcategory(MEM) :- MEM = "stack".
memcategory(MEM) :- MEM = "heap".
memcategory(MEM) :- MEM = "global".
memcategory(MEM) :- MEM = "arrayAll".
memcategory(MEM) :- MEM = "arrayIndex".
memcategory(MEM) :- MEM = "field".
memcategory(MEM) :- MEM = "vreg".

.decl memlocation(functionid: _functionid, memlocation: symbol, memtyp: symbol, memcategory: _memcategory)
.output memlocation(delimiter=",")
//stack allocations of one element.
memlocation(FID, LOC, TYP, CAT) :- instruction(BID, IID, LOC, OPC), block(FID, BID, _),
OPC = "alloca", CAT = "stack", memcategory(CAT), 
get_first_operand(IID, SIZE), is_numeric(SIZE), to_number(SIZE) = 1,
get_second_operand(IID, TYP).
//stack allocations of array (all element).
memlocation(FID, LOC, TYP, CAT) :- instruction(BID, IID, LOC, OPC), block(FID, BID, _),
OPC = "alloca", CAT = "arrayAll", memcategory(CAT), 
get_first_operand(IID, SIZE), is_numeric(SIZE), to_number(SIZE) > 1,
get_second_operand(IID, TYP).
//stack allocations of array (index elements).
memlocation(FID, LOCATION, TYP, CAT) :- 
memlocation_alloca_array_enumerator(FID, LOC, NUM, TYP, CAT),
LOCATION = cat(cat(LOC, "."), to_string(NUM)).

//heap allocations
memlocation(FID, LOC, TYP, CAT) :- instruction(BID, IID, LOC, _), block(FID, BID, _),
is_heap_allocation_call(IID), CAT = "heap", memcategory(CAT),
TYP = "i8*".
//global allocations of one element
memlocation(FID, LOC, TYP, CAT) :- global(LOC, TYP, SIZE),
SIZE = 1,
FID = -1, CAT = "global", memcategory(CAT).
//global allocations of array (all element).
memlocation(FID, LOC, TYP, CAT) :- global(LOC, TYP, SIZE),
SIZE > 1,
FID = -1, CAT = "arrayAll", memcategory(CAT).
//global allocations of array (index elements).
memlocation(FID, LOCATION, TYP, CAT) :- global(LOC, TYP, SIZE),
SIZE > 1,
memlocation_global_array_enumerator(FID, LOC, NUM, TYP, CAT),
LOCATION = cat(cat(LOC, "."), to_string(NUM)).


//vreg function call
memlocation(FID, LOC, TYP, CAT) :- instruction(BID, IID, VREG, OPC), block(FID, BID, _),
OPC = "call", get_function_for_call_instruction(FNAME, IID), function(_, FNAME, _, RETTYPE),
LOC = VREG,
CAT = "vreg",
TYP = RETTYPE.
//vreg no load
memlocation(FID, LOC, TYP, CAT) :- instruction(BID, IID, VREG, OPC), block(FID, BID, _),
OPC != "load", OPC != "alloca", OPC != "getelementptr", !is_heap_allocation_call(IID),
VREG != "%-1",
LOC = VREG,
CAT = "vreg", memcategory(CAT),
TYP = "unknown". 
//vreg load
memlocation(FID, LOC, TYP, CAT) :- instruction(BID, IID, VREG, OPC), block(FID, BID, _),
OPC = "load",
VREG != "%-1",
LOC = VREG,
CAT = "vreg", memcategory(CAT),
get_first_operand(IID, TYP).
//vreg getelementptr
memlocation(FID, LOC, TYP, CAT) :- instruction(BID, IID, VREG, OPC), block(FID, BID, _),
OPC = "getelementptr",
LOC = VREG,
CAT = "vreg", memcategory(CAT),
get_fourth_operand(IID, TYP).
//function arguments
memlocation(FID, LOC, TYPE, CAT) :- argument(FID, _, LOC, TYPE), CAT = "stack".



//recursive helper function to enumerate alloca arrays
.decl memlocation_alloca_array_enumerator(functionid: _functionid, memlocation: symbol, enumerator: number, memtyp: symbol, memcategory: _memcategory)
memlocation_alloca_array_enumerator(FID, LOC, NUM, TYP, CAT) :- 
instruction(BID, IID, LOC, OPC), block(FID, BID, _),
OPC = "alloca", CAT = "arrayIndex", memcategory(CAT), 
get_first_operand(IID, SIZE), is_numeric(SIZE), to_number(SIZE) > 1,
get_second_operand(IID, TYP), NUM = 0, NUM<to_number(SIZE).

memlocation_alloca_array_enumerator(FID, LOC, NUM, TYP, CAT) :- 
instruction(BID, IID, LOC, OPC), block(FID, BID, _),
OPC = "alloca", CAT = "arrayIndex", memcategory(CAT), 
get_first_operand(IID, SIZE), is_numeric(SIZE), to_number(SIZE) > 1,
get_second_operand(IID, TYP), NUM > 0, NUM<to_number(SIZE), NUM = NUM2+1,
memlocation_alloca_array_enumerator(FID, LOC, NUM2, TYP, CAT).

//recursive helper function to enumerate global arrays
.decl memlocation_global_array_enumerator(functionid: _functionid, memlocation: symbol, enumerator: number, memtyp: symbol, memcategory: _memcategory)
memlocation_global_array_enumerator(FID, LOC, NUM, TYP, CAT) :-
global(LOC, TYP, SIZE),
NUM = 0, NUM<SIZE,
SIZE > 1,
FID = -1, CAT = "arrayIndex", memcategory(CAT).

memlocation_global_array_enumerator(FID, LOC, NUM, TYP, CAT) :-
global(LOC, TYP, SIZE),
NUM > 0, NUM<SIZE, NUM = NUM2+1,
SIZE > 1,
memlocation_global_array_enumerator(FID, LOC, NUM2, TYP, CAT),
FID = -1, CAT = "arrayIndex", memcategory(CAT).


//not sure what this is or whether this is used
.decl get_val_of_load(instructionid: _instructionid, value: symbol)
get_val_of_load(IID, VAL) :- instruction(BID, IID, VREG, OPC), block(FID, BID, _), OPC = "load",
get_first_operand(IID, LOADTYPE), !is_pointer(LOADTYPE),
points_to(FID, VREG, _, _, FID, VAL, _, _).