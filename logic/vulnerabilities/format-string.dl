//detect format string attack
.decl is_vulnerable_format_string_instruction(instructionid: _instructionid, message: symbol)
//.output is_vulnerable_format_string_instruction
is_vulnerable_format_string_instruction(IID, MESSAGE) :-
get_formatstring_arg(FNAME, RELARGNUM),
block(FID, BID, _),
instruction(BID, IID, _, _), 
is_X_call_instruction(FNAME, IID),
get_ith_operand(IID, RELARGNUM, FSLOC),
is_vreg(FSLOC),
is_memloc_with_userinput(FID, FSLOC, _),
MESSAGE = cat(cat(cat(FNAME," detected and userinput is provided to its #"),to_string(RELARGNUM)), " argument which may indicate a format string vulnerability")
.



//returns a functionname with the relative argument number, which contains the formatstring
.decl get_formatstring_arg(functionname: symbol, relargnum: number)
get_formatstring_arg(FNAME, NUM) :- FNAME="printf", NUM=1.
get_formatstring_arg(FNAME, NUM) :- FNAME="fprintf", NUM=2.

get_formatstring_arg(FNAME, NUM) :- FNAME="sprintf", NUM=2.
get_formatstring_arg(FNAME, NUM) :- FNAME="snprintf", NUM=3.

get_formatstring_arg(FNAME, NUM) :- FNAME="vprintf", NUM=1.
get_formatstring_arg(FNAME, NUM) :- FNAME="vfprintf", NUM=2.
get_formatstring_arg(FNAME, NUM) :- FNAME="vsprintf", NUM=2.
get_formatstring_arg(FNAME, NUM) :- FNAME="vsnprintf", NUM=3.

//get_formatstring_arg(FNAME, NUM) :- FNAME="syslog", NUM=2.
