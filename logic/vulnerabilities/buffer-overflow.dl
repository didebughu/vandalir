//strncpy vulnerable to bo
.decl is_vulnerable_strncpy_call_instruction(instructionid: _instructionid, message: symbol)
is_vulnerable_strncpy_call_instruction(IID, MESSAGE) :- is_strncpy_call_instruction(IID), 
block(FID, BID, _), instruction(BID, IID, _, _),
get_first_operand(IID, OV1), get_third_operand(IID, N), 
get_buffsize_by_vreg(DEST_SIZE, FID, OV1), 
get_int_by_vreg(COPY_SIZE, FID, N),
MESSAGE = cat(cat(cat("strncpy: possible insufficient buffer size ", to_string(DEST_SIZE)), " for n of size "), to_string(COPY_SIZE)),
DEST_SIZE < COPY_SIZE.

//fgets vulnerable to bo
.decl is_vulnerable_fgets_call_instruction(instructionid: _instructionid, message: symbol)
is_vulnerable_fgets_call_instruction(IID, MESSAGE) :- is_fgets_call_instruction(IID),
block(FID, BID, _), instruction(BID, IID, _, _), 
get_first_operand(IID, OV1), get_second_operand(IID, N),
get_buffsize_by_vreg(DEST_SIZE, FID, OV1), 
get_int_by_vreg(COPY_SIZE, FID, N),
MESSAGE = cat(cat(cat("fgets: possible insufficient buffer size ", to_string(DEST_SIZE)), " for n of size "), N),
DEST_SIZE < COPY_SIZE.

//snprintf vulnerable to bo
.decl is_vulnerable_snprintf_call_instruction(instructionid: _instructionid, message: symbol)
is_vulnerable_snprintf_call_instruction(IID, MESSAGE) :- 
is_X_call_instruction("snprintf", IID),
block(FID, BID, _), instruction(BID, IID, _, _), 
get_first_operand(IID, DEST), 
get_second_operand(IID, N),
get_buffsize_by_vreg(DEST_SIZE, FID, DEST), 
get_int_by_vreg(COPY_SIZE, FID, N),
DEST_SIZE < COPY_SIZE,
MESSAGE = cat(cat(cat("snprintf: possible insufficient buffer size ", to_string(DEST_SIZE)), " for n of size "), N)
.


/*
//sprintf vulnerable to bo
.decl is_vulnerable_sprintf_call_instruction(instructionid: _instructionid, message: symbol)
is_vulnerable_sprintf_call_instruction(IID, MESSAGE) :- 
is_X_call_instruction("sprintf", IID),
block(FID, BID, _), instruction(BID, IID, _, _), 
get_first_operand(IID, DEST), 
get_second_operand(IID, FORMATSTR),
get_third_operand(IID, I, SRC),



get_buffsize_by_vreg(DEST_SIZE, FID, DEST),



MESSAGE = cat(cat(cat("sprintf: possible insufficient buffer size ", to_string(DEST_SIZE)), " for n of size "), TOTALSIZE),
DEST_SIZE < COPY_SIZE.



.decl get_length_of_unformatted_str(length: number, str: symbol)
get_length_of_unformatted_str(LEN, STR) :-
CLEANSTR = STR
//This probably need a CPP implementation

*/