//strncpy vulnerable to bo
.decl is_vulnerable_strncpy_call_instruction(instructionid: _instructionid, message: symbol)
//computed n
is_vulnerable_strncpy_call_instruction(IID, MESSAGE) :- is_strncpy_call_instruction(IID), 
block(FID, BID, _), instruction(BID, IID, _, _),
get_first_operand(IID, OV1), get_third_operand(IID, N), 
get_buffsize_by_vreg(DEST_SIZE, FID, OV1), is_vreg(N), 
get_int_by_vreg(COPY_SIZE, FID, N),
MESSAGE = cat(cat(cat("strncpy: possible insufficient buffer size ", to_string(DEST_SIZE)), " for n of size "), to_string(COPY_SIZE)),
DEST_SIZE < COPY_SIZE.
//hardcoded n
is_vulnerable_strncpy_call_instruction(IID, MESSAGE) :- is_strncpy_call_instruction(IID), 
block(FID, BID, _), instruction(BID, IID, _, _),
get_first_operand(IID, OV1), get_third_operand(IID, N),  
get_buffsize_by_vreg(DEST_SIZE, FID, OV1), 
is_numeric(N),
MESSAGE = cat(cat(cat("strncpy: possible insufficient buffer size ", to_string(DEST_SIZE)), " for n of size "), N),
DEST_SIZE < to_number(N).

//fgets vulnerable to bo
.decl is_vulnerable_fgets_call_instruction(instructionid: _instructionid, message: symbol)
//computed n
is_vulnerable_fgets_call_instruction(IID, MESSAGE) :- is_fgets_call_instruction(IID), 
block(FID, BID, _), instruction(BID, IID, _, _),
get_first_operand(IID, OV1), get_second_operand(IID, N), 
get_int_by_vreg(DEST_SIZE, FID, OV1), is_vreg(N), 
get_buffsize_by_vreg(COPY_SIZE, FID, N),
MESSAGE = cat(cat(cat("fgets: possible insufficient buffer size ", to_string(DEST_SIZE)), " for n of size "), to_string(COPY_SIZE)),
DEST_SIZE < COPY_SIZE.
//hardcoded n
is_vulnerable_fgets_call_instruction(IID, MESSAGE) :- is_fgets_call_instruction(IID),
block(FID, BID, _), instruction(BID, IID, _, _), 
get_first_operand(IID, OV1), get_second_operand(IID, N),
get_buffsize_by_vreg(DEST_SIZE, FID, OV1), 
is_numeric(N),
MESSAGE = cat(cat(cat("fgets: possible insufficient buffer size ", to_string(DEST_SIZE)), " for n of size "), N),
DEST_SIZE < to_number(N).