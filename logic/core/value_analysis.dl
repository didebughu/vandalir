// Copyright (c) 2023 Google LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#pragma once

#include "defines.dl"
#include "block.dl"
#include "instruction_analysis.dl"
#include "instruction.dl"
#include "operand.dl"
#include "operand_utils.dl"
#include "type.dl"
#include "global.dl"


#ifdef DEBUG_VREG_VALUE_ANALYSIS
  #define VA_OUTPUT(x) OUTPUT_IMPL(x)
#else
  #define VA_OUTPUT(x)
#endif

#if defined(TRACE_VREG_VALUE_ANALYSIS) && defined(DEBUG_VREG_VALUE_ANALYSIS)
  #define DEBUG_MSG_DECL TRACE_MSG_DECL
  #define DEBUG_MSG_PARAM TRACE_MSG_PARAM
  #define DEBUG_MSG_INIT TRACE_MSG_INIT
  #define DEBUG_MSG_ENDPOINT(iid, value) \
    TRACE_MSG(cat("ENDPOINT ", DEPTH_MSG ": (", to_string(iid), \
              ") = ", to_string(value)))
  #define DEBUG_MSG_MOVE(iid, iid_to, value) \
    TRACE_MSG(cat("MOVE ", DEPTH_MSG ": (", to_string(iid), \
              ") -> (", to_string(iid_to), ") = ", to_string(value)))
#else
  #define DEBUG_MSG_DECL
  #define DEBUG_MSG_PARAM
  #define DEBUG_MSG_INIT
  #define DEBUG_MSG_ENDPOINT(iid, value)
  #define DEBUG_MSG_MOVE(iid, iid_to, value )
#endif

.comp _VRegValueAnalysis {

#define RAND_MAX 32767

#define VA_GET_INT_FROM_OP(fid, iid, op, val) \
    (DEBUG_MSG_ENDPOINT(iid, val) \
     Operand.int(op, val); \
     DEBUG_MSG_MOVE(iid, iid_##op, val) \
     Operand.vreg(op, op##_vreg, op##_type), \
     get_int_impl(fid, iid_##op, op##_vreg, val DEPTH_UPDATE DEBUG_MSG_INIT), \
     InstructionAnalysis.is_instruction_before(iid, iid_##op), \
     !VRegAnalysis.modified(iid_##op, iid, op##_vreg) \
    )

  // get possible integer values of VREG in specific function
  .decl get_int(fid: func_t, vreg: name_t, value: number)
  VA_OUTPUT(get_int)

  get_int(fid, vreg, value) :-
    get_int_impl(fid, _, vreg, value DEPTH_INIT DEBUG_MSG_INIT).

  .decl get_int_impl(fid: func_t,
                     iid: instr_t,
                     vreg: name_t,
                     value: number
                     DEPTH_DECL
                     DEBUG_MSG_DECL)
  VA_OUTPUT(get_int_impl)

  // case ADD
  get_int_impl(fid, iid, vreg, value DEPTH_PARAM DEBUG_MSG_PARAM) :-
    DEPTH_CHECK
    Block.get(fid, bid, _),
    Instruction.Add.get(iid, bid, vreg),
    Instruction.Add.operands(iid, bid, op0, op1, _),
    VA_GET_INT_FROM_OP(fid, iid, op0, val0),
    VA_GET_INT_FROM_OP(fid, iid, op1, val1),
    value = val0 + val1.

  // case MULL
  get_int_impl(fid, iid, vreg, value DEPTH_PARAM DEBUG_MSG_PARAM) :-
    DEPTH_CHECK
    Block.get(fid, bid, _),
    Instruction.Mul.get(iid, bid, vreg),
    Instruction.Mul.operands(iid, bid, op0, op1, _),
    VA_GET_INT_FROM_OP(fid, iid, op0, val0),
    VA_GET_INT_FROM_OP(fid, iid, op1, val1),
    value = val0 * val1.

  // case SUB
  get_int_impl(fid, iid, vreg, value DEPTH_PARAM DEBUG_MSG_PARAM) :-
    DEPTH_CHECK
    Block.get(fid, bid, _),
    Instruction.Sub.get(iid, bid, vreg),
    Instruction.Sub.operands(iid, bid, op0, op1, _),
    VA_GET_INT_FROM_OP(fid, iid, op0, val0),
    VA_GET_INT_FROM_OP(fid, iid, op1, val1),
    value = val0 - val1.

  // case UDIV, SDIV
  // TODO: fix correct value calc
  get_int_impl(fid, iid, vreg, value DEPTH_PARAM DEBUG_MSG_PARAM) :-
    DEPTH_CHECK
    Block.get(fid, bid, _),
    (Instruction.UDiv.get(iid, bid, vreg),
     Instruction.UDiv.operands(iid, bid, op0, op1, _);
     Instruction.SDiv.get(iid, bid, vreg),
     Instruction.SDiv.operands(iid, bid, op0, op1, _)
    ),
    VA_GET_INT_FROM_OP(fid, iid, op0, val0),
    VA_GET_INT_FROM_OP(fid, iid, op1, val1),
    value = val0 / val1.

  // case URem, SRem
  // TODO: fix correct value calc
  get_int_impl(fid, iid, vreg, value DEPTH_PARAM DEBUG_MSG_PARAM) :-
    DEPTH_CHECK
    Block.get(fid, bid, _),
    (Instruction.URem.get(iid, bid, vreg),
     Instruction.URem.operands(iid, bid, op0, op1, _);
     Instruction.SRem.get(iid, bid, vreg),
     Instruction.SRem.operands(iid, bid, op0, op1, _)
    ),
    VA_GET_INT_FROM_OP(fid, iid, op0, val0),
    VA_GET_INT_FROM_OP(fid, iid, op1, val1),
    value = val0 % val1.

  // case And
  get_int_impl(fid, iid, vreg, value DEPTH_PARAM DEBUG_MSG_PARAM) :-
    DEPTH_CHECK
    Block.get(fid, bid, _),
    Instruction.And.get(iid, bid, vreg),
    Instruction.And.operands(iid, bid, op0, op1, _),
    VA_GET_INT_FROM_OP(fid, iid, op0, val0),
    VA_GET_INT_FROM_OP(fid, iid, op1, val1),
    value = val0 band val1.

  // case Or
  get_int_impl(fid, iid, vreg, value DEPTH_PARAM DEBUG_MSG_PARAM) :-
    DEPTH_CHECK
    Block.get(fid, bid, _),
    Instruction.Or.get(iid, bid, vreg),
    Instruction.Or.operands(iid, bid, op0, op1, _),
    VA_GET_INT_FROM_OP(fid, iid, op0, val0),
    VA_GET_INT_FROM_OP(fid, iid, op1, val1),
    value = val0 bor val1.

  // case Xor
  get_int_impl(fid, iid, vreg, value DEPTH_PARAM DEBUG_MSG_PARAM) :-
    DEPTH_CHECK
    Block.get(fid, bid, _),
    Instruction.Xor.get(iid, bid, vreg),
    Instruction.Xor.operands(iid, bid, op0, op1, _),
    VA_GET_INT_FROM_OP(fid, iid, op0, val0),
    VA_GET_INT_FROM_OP(fid, iid, op1, val1),
    value = val0 bxor val1.

  // case Shl
  get_int_impl(fid, iid, vreg, value DEPTH_PARAM DEBUG_MSG_PARAM) :-
    DEPTH_CHECK
    Block.get(fid, bid, _),
    Instruction.Shl.get(iid, bid, vreg),
    Instruction.Shl.operands(iid, bid, op0, op1, _),
    VA_GET_INT_FROM_OP(fid, iid, op0, val0),
    VA_GET_INT_FROM_OP(fid, iid, op1, val1),
    value = val0 bshl val1.

  // case LShr
  get_int_impl(fid, iid, vreg, value DEPTH_PARAM DEBUG_MSG_PARAM) :-
    DEPTH_CHECK
    Block.get(fid, bid, _),
    Instruction.LShr.get(iid, bid, vreg),
    Instruction.LShr.operands(iid, bid, op0, op1, _),
    VA_GET_INT_FROM_OP(fid, iid, op0, val0),
    VA_GET_INT_FROM_OP(fid, iid, op1, val1),
    value = val0 bshru val1.

  // case Ashr
  get_int_impl(fid, iid, vreg, value DEPTH_PARAM DEBUG_MSG_PARAM) :-
    DEPTH_CHECK
    Block.get(fid, bid, _),
    Instruction.AShr.get(iid, bid, vreg),
    Instruction.AShr.operands(iid, bid, op0, op1, _),
    VA_GET_INT_FROM_OP(fid, iid, op0, val0),
    VA_GET_INT_FROM_OP(fid, iid, op1, val1),
    value = val0 bshr val1.

  // case Conversation ops
  get_int_impl(fid, iid, vreg, value DEPTH_PARAM DEBUG_MSG_PARAM) :-
    DEPTH_CHECK
    Block.get(fid, bid, _),
    Instruction.Conversation.get(iid, bid, vreg),
    Instruction.Conversation.operands(iid, bid, op, _, _),
    VA_GET_INT_FROM_OP(fid, iid, op, value).

  // LOAD
  get_int_impl(fid, iid, vreg, value DEPTH_PARAM DEBUG_MSG_PARAM) :-
    DEPTH_CHECK
    Block.get(fid, bid, _),
    Instruction.Load.get(iid, bid, vreg, addr),
    (DEBUG_MSG_ENDPOINT(iid, value)
     Operand.int(addr, value);
     Operand.vreg(addr, addr_vreg, addr_vreg_type),
     Type.Pointer.pointee(addr_vreg_type, ptr_type),
     get_int_impl(fid, iid_sub, addr_vreg, value DEPTH_UPDATE DEBUG_MSG_INIT),
     DEBUG_MSG_MOVE(iid, iid_sub, value)
     InstructionAnalysis.is_instruction_before(iid, iid_sub)
    ).

  // STORE
  get_int_impl(fid, iid, vreg, value DEPTH_PARAM DEBUG_MSG_PARAM) :-
    DEPTH_CHECK
    Block.get(fid, bid, _),
    Instruction.Store.get(iid, bid, addr_op, val),
    Operand.vreg(addr_op, vreg, _),
    VA_GET_INT_FROM_OP(fid, iid, val, value).

  // Phi
  get_int_impl(fid, iid, vreg, value DEPTH_PARAM DEBUG_MSG_PARAM) :-
    DEPTH_CHECK
    Block.get(fid, bid, _),
    Instruction.Phi.get(iid, bid, vreg),
    Instruction.Phi.ith_operand(iid, _, op, _),
    VA_GET_INT_FROM_OP(fid, iid, op, value).

  // Call rand
  get_int_impl(fid, iid, vreg, value DEPTH_PARAM DEBUG_MSG_PARAM) :-
    DEPTH_CHECK
    Block.get(fid, bid, _),
    Instruction.Call.global_func(iid, bid, vreg, name, _),
    name = "%rand",
    DEBUG_MSG_ENDPOINT(iid, value)
    (value = RAND_MAX; value = 0).

  get_int_impl(fid, iid, vreg, value DEPTH_PARAM DEBUG_MSG_PARAM) :-
    DEPTH_CHECK
    Block.get(fid, bid, _),
    Instruction.Call.global_func(iid, bid, vreg, name, _),
    name = "%strlen",
    DEBUG_MSG_ENDPOINT(iid, value)
    Instruction.Call.ith_operand(iid, 0, op),
    OperandUtil.name(op, arg_name, arg_tid),
    InstructionAnalysis.is_instruction_before(iid, iid_sz),
    buff_size(fid, iid_sz, arg_name, arg_tid, size),
    value = size - 1.  // last byte is '\0'

  get_int_impl(fid, iid, vreg, value DEPTH_PARAM DEBUG_MSG_PARAM) :-
    DEPTH_CHECK
    VRegAnalysis.same_external(fid, iid, vreg, _, fid_ext, iid_ext,
                               vreg_ext, _),
    InstructionAnalysis.is_instruction_before(iid_ext, iid_impl),
    DEBUG_MSG_MOVE(iid, iid_impl, value)
    !VRegAnalysis.modified(iid_impl, iid_ext, vreg_ext),
    get_int_impl(fid_ext, iid_impl, vreg_ext, value DEPTH_UPDATE DEBUG_MSG_INIT).

  .decl is_null(fid: func_t, iid: instr_t, vreg: name_t, tid: type_t)
  VA_OUTPUT(is_null)

  is_null(fid, iid, vreg, tid) :-
    Block.get(fid, bid, _),
    Instruction.Store.get(iid, bid, addr_op, value),
    Operand.vreg(addr_op, vreg, tid_op),
    Type.Pointer.pointee(tid_op, tid),
    Operand.null(value).

  is_null(fid, iid, vreg, tid) :-
    Block.get(fid, _, _),
    VRegAnalysis.equel(fid, iid, vreg, tid, vreg_sub, _),
    InstructionAnalysis.is_instruction_before(iid, iid_n),

    C = count : {
      InstructionAnalysis.is_instruction_before(iid, iid_mod2),
      InstructionAnalysis.is_instruction_before(iid_mod2, iid_n),
      VRegAnalysis.modified_at(fid, iid, vreg, iid_mod2)
    },
    C = 0,
    is_null(fid, iid_n, vreg_sub, tid).

  is_null(fid, iid, vreg, tid) :-
    VRegAnalysis.same_external(fid, iid, vreg, tid, fid_ext, iid_ext,
                               vreg_ext, tid_ext),
    InstructionAnalysis.is_instruction_before(iid_ext, iid_nl),
    is_null(fid_ext, iid_nl, vreg_ext, tid_ext).

  // get possible size of a VREG or a global var in bytes.
  .decl size(fid: func_t, iid: instr_t,
                  name: name_t, tid: type_t, size: number)
  VA_OUTPUT(size)

  // basic case
  size(fid, iid, name, tid, size) :-
    Block.get(fid, bid, _),
    Instruction.get(iid, bid, _, _),
    VRegAnalysis.type(fid, name, name_tid),
    Type.equel(name_tid, tid),
    Type.collection(name_tid, size).

  size(fid, iid, name, tid, size) :-
    Block.get(fid, bid, _),
    Instruction.get(iid, bid, _, _),
    VRegAnalysis.type(fid, name, name_tid),
    Type.equel(name_tid, tid),
    Type.collection(name_tid, size).

  // special case for `alloca` instruction where type is not a collection
  // accept both "type" and "type*".
  size(fid, iid, name, tid, size) :-
    Block.get(fid, bid, _),
    Instruction.Alloca.get(iid, bid, name, name_tid, size),
    !Type.collection(name_tid, _),
    !Type.is_pointer(name_tid),
    (
      Type.Pointer.pointee(tid, name_tid);
      tid = name_tid
    ).

  // 'alloca [6 x i8], i64 2' should be 2
  size(fid, iid, name, tid, size) :-
    Block.get(fid, bid, _),
    Instruction.Alloca.get(iid, bid, name, name_tid, size),
    size > 1,
    Type.Pointer.pointee(tid, name_tid),
    Type.collection(name_tid, _).

  // size for 'alloca [6 x i8], i64 1' should be 6
  size(fid, iid, name, tid, size) :-
    Block.get(fid, bid, _),
    Instruction.Alloca.get(iid, bid, name, name_tid, num),
    num = 1,
    Type.equel(name_tid, tid),
    Type.collection(name_tid, size).

  // get possible size of a VREG or a global var in bytes.
  .decl buff_size(fid: func_t, iid: instr_t,
                  name: name_t, tid: type_t, size: number)
  VA_OUTPUT(buff_size)

  // simple case
  buff_size(fid, iid, name, tid, size) :-
    size(fid, iid, name, tid, size).

  buff_size(fid, iid, name, tid, size) :-
    VRegAnalysis.equel(fid, iid, name, tid, name_new, tid_new),
    Type.equel(tid, tid_new),
    InstructionAnalysis.is_instruction_before(iid, iid_bz),
    buff_size(fid, iid_bz, name_new, tid_new, size).

  buff_size(fid, iid, name, tid, size) :-
    VRegAnalysis.equel(fid, iid, name, tid, name_new, tid_new),
    Type.equel(tid, tid_new),
    InstructionAnalysis.is_instruction_before(iid, iid_bz),
    buff_size(fid, iid_bz, name_new, tid_new, size).

  buff_size(fid, iid, name, tid, size) :-
    VRegAnalysis.equel(fid, iid, name, tid, name_new, tid_eq),
    !Type.equel(tid, tid_eq),
    (
      !Type.Pointer.pointee(tid_eq, _),
      tid_new = tid_eq;
      Type.Pointer.pointee(tid_eq, tid_new)
    ),
    (
      size(fid, iid_bz, name_new, tid_new, _),
      Type.collection(tid_new, _),
      num = 1;
      size(fid, iid_bz, name_new, tid_new, size_orig),
      !Type.collection(tid_new, _),
      num = size_orig
    ),
    InstructionAnalysis.is_instruction_before(iid, iid_bz),
    (
      Type.Pointer.pointee(tid, ptid),
      dest_tid = ptid;
      !Type.Pointer.pointee(tid, _),
      dest_tid = tid
    ),
    Type.size_in_bits(tid_new, new_bits),
    Type.size_in_bits(dest_tid, bits),

    bits != 0,
    total_bits = new_bits * num,
    size = total_bits / bits.

  buff_size(fid, iid, name, tid, size) :-
    VRegAnalysis.equel(fid, iid, name, tid, tmp, tmp_tid),
    InstructionAnalysis.is_instruction_before(iid, iid_pt),
    VRegAnalysis.point_to(fid, iid_pt, tmp, tmp_tid, name_new, tid_new),
    InstructionAnalysis.is_instruction_before(iid_pt, iid_bs),
    buff_size(fid, iid_bs, name_new, tid_new, size).

  buff_size(fid, iid, name, tid, size) :-
    VRegAnalysis.equel(fid, iid, name, tid, name_new, tid_new),
    InstructionAnalysis.is_instruction_before(iid, iid_new),
    VRegAnalysis.same_external(fid, iid_new, name_new, tid_new, fid_ext, iid_ext,
                               name_ext, tid_ext),
    InstructionAnalysis.is_instruction_before(iid_ext, iid_bs),
    buff_size(fid_ext, iid_bs, name_ext, tid_ext, size).
}

.init VRegValueAnalysis = _VRegValueAnalysis
