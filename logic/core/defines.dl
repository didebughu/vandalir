// Copyright (c) 2023 Google LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#pragma once

.type id_t <: number
.type func_t <: id_t
.type block_t <: id_t
.type instr_t <: id_t
.type type_t <: id_t
.type const_t <: id_t
.type global_t <: id_t
.type operand_t <: id_t

.type name_t <: symbol
.type opcode_t <: symbol

#define MAXINT 18446744073709551615

#ifdef SQLITE_INPUT
#define INPUT(x) .input x(IO=sqlite, dbname="data.db")
#else
#define INPUT(x) .input x(delimiter=";")
#endif

#define OUTPUT_IMPL(x) .output x(delimiter=";")

#define DEPTH 100

.decl Depth(n: number)
Depth(n) :-
  n = 0.
Depth(n + 1) :-
  Depth(n), n < DEPTH.


#ifdef DEPTH_RECURSION

#define DEPTH_DECL , depth: number
#define DEPTH_PARAM , depth
#define DEPTH_INIT , 0
#define DEPTH_CHECK Depth(depth),
#define DEPTH_UPDATE  , depth + 1
#define DEPTH_MSG  to_string(depth), 

#else

#define DEPTH_DECL
#define DEPTH_PARAM
#define DEPTH_INIT
#define DEPTH_CHECK
#define DEPTH_UPDATE
#define DEPTH_MSG

#endif  // DEPTH_RECURSION

#define TRACE_MSG_DECL ,msg: symbol
#define TRACE_MSG_PARAM ,msg
#define TRACE_MSG_INIT , _
#define TRACE_MSG(value) \
  msg = value,
