// Copyright (c) 2023 Google LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#pragma once

#include "defines.dl"
#include "input/operand.dl"
#include "type.dl"
#include "constant.dl"

#ifdef DEBUG_OPERAND
#define OP_OUTPUT(x) OUTPUT_IMPL(x)
#else
#define OP_OUTPUT(x)
#endif

.comp _Operand {

  .decl name(id: operand_t, name: name_t)
  name(id, name) :-
    operand(id, name, _, _).

  .decl const(id: operand_t, cid: const_t)
  const(id, cid) :-
    operand(id, _, family, family_id),
    family = "constant",
    cid = as(family_id, const_t).


  .decl global_ref(id: operand_t, name: symbol, tid: type_t)
  OP_OUTPUT(global_ref)

  global_ref(id, name, tid) :-
    operand(id, _, family, family_id),
    family = "constant",
    Constant.global_ref(as(family_id, const_t), name, tid).


  .decl int(id: operand_t, value: number)
  OP_OUTPUT(int)

  int(id, value) :-
    operand(id, _, family, family_id),
    family = "constant",
    Constant.Int.value(family_id, value).


  .decl vreg(id: operand_t, name: name_t, tid: type_t)
  OP_OUTPUT(vreg)
  vreg(id, name, tid) :-
    operand(id, _, family, family_id),
    family = "local",
    operand_local(as(family_id, operand_sub_t), name, tid).
}
.init Operand = _Operand
