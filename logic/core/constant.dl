// Copyright (c) 2023 Google LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#pragma once

#include "defines.dl"
#include "input/constants.dl"

#ifdef DEBUG_CONSTANT
#define CONST_OUTPUT(x) OUTPUT_IMPL(x)
#else
#define CONST_OUTPUT(x)
#endif

.comp _Constant {

  .decl is_struct(id: const_t)
  CONST_OUTPUT(is_struct)

  is_struct(id) :-
    constant(id, family, _),
    family = "struct".

  .decl is_array(id: const_t)
  CONST_OUTPUT(is_array)

  is_array(id) :-
    constant(id, family, _),
    family = "array".

  .decl is_vector(id: const_t)
  CONST_OUTPUT(is_vector)

  is_vector(id) :-
    constant(id, family, _),
    family = "vector".

  .decl is_int(id: const_t)
  CONST_OUTPUT(is_int)

  is_int(id) :-
    constant(id, family, _),
    family = "int".

  .decl is_null(id: const_t)
  CONST_OUTPUT(is_null)

  is_null(id) :-
    constant(id, family, _),
    family = "null".

  .decl global_ref(id: const_t, name: name_t, tid: type_t)
  CONST_OUTPUT(global_ref)
  global_ref(id, name, tid) :-
    constant(id, family, family_id),
    family = "global_ref",
    constant_global_ref(family_id, name, tid).

  global_ref(id, name, tid) :-
    GetElementPtr.get(id, name, tid, _).

  global_ref(id, name, tid) :-
    Conversation.get(id, name, tid, _).

  .decl is_const_expr(id: const_t)
  is_const_expr(id) :-
    constant(id, family, _),
    (family = "add";
     family = "sub";
     family = "mul";
     family = "udiv";
     family = "sdiv";
     family = "urem";
     family = "srem";
     family = "and";
     family = "or";
     family = "xor";
     family = "shl";
     family = "lshr";
     family = "ashr";
     family = "fadd";
     family = "fsub";
     family = "fmul";
     family = "fdiv";
     family = "frem";
     family = "extractelement";
     family = "insertelement";
     family = "shufflevector";
     family = "extractvalue";
     family = "insertvalue";
     family = "getelementptr";
     family = "trunc";
     family = "zext";
     family = "sext";
     family = "fptrunc";
     family = "fpext";
     family = "fptoui";
     family = "fptosi";
     family = "uitofp";
     family = "sitofp";
     family = "ptrtoint";
     family = "inttoptr";
     family = "bitcast";
     family = "addrspacecast";
     family = "icmp";
     family = "fcmp";
     family = "select").

  .comp Int {
    .decl value(id: const_t, value: number)

    value(id, val) :-
      constant(id, family, family_id),
      family = "int",
      constant_int(family_id, _, val).
  }

  .comp GetElementPtr {
    .decl get(id: const_t, addr: name_t, tid: type_t, num_idx: number)
    CONST_OUTPUT(get)

    get(id, addr, tid, num_idx) :-
      constant(id, family, family_id),
      family = "getelementptr",
      constant_getelementptr(family_id, cid, _, num_idx),
      constant(cid, family_sub, family_sub_id),
      family_sub = "global_ref",
      constant_global_ref(family_sub_id, addr, tid).

    .decl ith_index(id: const_t, idx: number, value: number)
    CONST_OUTPUT(ith_index)

    ith_index(id, idx, value) :-
      constant(id, family, family_id),
      family = "getelementptr",
      constant_getelementptr(family_id, _, _, idx_num),
      idx < idx_num,
      ith_index_impl(_, family_id, idx, cid),
      Int.value(cid, value).

    .decl ith_index_impl(id: const_sub_t,
                         family_id: const_sub_t,
                         idx: number,
                         cid: const_t)
    CONST_OUTPUT(ith_index_impl)
    ith_index_impl(id, family_id, idx, cid) :-
      idx=0,
      constant_gep_index(id, family_id, cid),
      !constant_gep_index(id - 1, family_id, _).

    ith_index_impl(id, family_id, idx + 1, cid) :-
      constant_gep_index(id, family_id, cid),
      ith_index_impl(id - 1, family_id, idx, _).
  }

  .comp Conversation {
    .decl get(id: const_t, name: name_t, tid_from: type_t, tid_to: type_t)
    CONST_OUTPUT(get)
    get(id, name, tid_from, tid_to) :-
      constant(id, family, family_id),
      (family = "trunc";
       family = "zext";
       family = "sext";
       family = "fptrunc";
       family = "fpext";
       family = "fptoui";
       family = "fptosi";
       family = "uitofp";
       family = "sitofp";
       family = "ptrtoint";
       family = "inttoptr";
       family = "bitcast";
       family = "addrspacecast"),
      constant_unary_operand(family_id, cid, tid_to),
      constant(cid, family_sub, family_sub_id),
      family_sub = "global_ref",
      constant_global_ref(family_sub_id, name, tid_from).
  }

  .init Int = Int
  .init GetElementPtr = GetElementPtr
  .init Conversation = Conversation
}

.init Constant = _Constant
