// Copyright (c) 2023 Google LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#pragma once

#include "defines.dl"
#include "input/analysis.dl"

#ifdef DEBUG_CFG
#define CF_OUTPUT(x) OUTPUT_IMPL(x)
#else
#define CF_OUTPUT(x)
#endif


.comp _ControlFlowGraph {

  .decl block_predecessor(func_name: symbol, bname: name_t, bname1: name_t)
  CF_OUTPUT(block_predecessor)

  block_predecessor(func_name, bname, bname_pred) :-
    block_pred(_, func_name, bname, bname_pred).

  block_predecessor(func_name, bname, bname_pred) :-
    block_pred(_, func_name, bname, tmp),
    block_predecessor(func_name, tmp, bname_pred).

  .decl block_successor(func_name: symbol, bname_A: name_t, bname_B: name_t)
  CF_OUTPUT(block_successor)

  block_successor(func_name, A, B) :-
    block_succ(_, func_name, A, B).

  block_successor(func_name, A, B) :-
    block_succ(_, func_name, A, tmp),
    block_successor(func_name, tmp, B).

  .decl block_successor_without_node(func_name: symbol,
                                     bname_A: name_t,
                                     bname_B: name_t,
                                     bname_C: name_t)  // exclude path with this node in it
  CF_OUTPUT(block_successor_without_node)

  block_successor_without_node(func_name, A, B, C) :-
    block_succ(_, func_name, C, _),
    block_succ(_, func_name, A, B),
    C != B.

  block_successor_without_node(func_name, A, B, C) :-
    block_succ(_, func_name, A, tmp),
    C != tmp,
    block_successor_without_node(func_name, tmp, B, C).

  .decl block_successor_without_node1(func_name: symbol,
                                     bname_A: name_t,
                                     bname_B: name_t,
                                     bname_C: name_t)  // exclude path with this node in it
  CF_OUTPUT(block_successor_without_node1)

  block_successor_without_node1(func_name, C, A, B) :-
    block_succ(_, func_name, C, _),
    block_succ(_, func_name, A, B),
    C != B.

  block_successor_without_node1(func_name, C, A, B) :-
    block_succ(_, func_name, A, tmp),
    C != tmp,
    block_successor_without_node1(func_name, C, tmp, B).

  // A dom B
  .decl block_dom(func_name: symbol, bname_A: name_t, bname_B: name_t)
  CF_OUTPUT(block_dom)

  block_dom(func_name, A, B) :-
    block_idom(_, func_name, B, A).

  block_dom(func_name, A, B) :-
    block_idom(_, func_name, B, tmp),
    block_dom(func_name, A, tmp).


  .decl block_forward_egdes(func_name: symbol, bname_A: name_t, bname_B: name_t)
  CF_OUTPUT(block_forward_egdes)

  block_forward_egdes(func_name, A, B) :-
    block_forward_egde(func_name, A, B).

  block_forward_egdes(func_name, A, B) :-
    block_forward_egde(func_name, A, tmp),
    block_forward_egdes(func_name, tmp, B).


  .decl block_forward_egde(func_name: symbol, bname_A: name_t, bname_B: name_t)
  CF_OUTPUT(block_forward_egde)

  block_forward_egde(func_name, A, B) :-
    block_succ(_, func_name, A, B),
    !block_dom(func_name, B, A).


  .decl block_back_egde(func_name: symbol, bname_A: name_t, bname_B: name_t)
  CF_OUTPUT(block_back_egde)

  block_back_egde(func_name, A, B) :-
    block_succ(_, func_name, A, B),
    block_dom(func_name, B, A).

  // Natural loop nodes
  .decl block_loop_node(func_name: symbol, head: name_t, node: name_t)
  CF_OUTPUT(block_loop_node)

  block_loop_node(func_name, head, node) :-
    block_back_egde(func_name, tail, head),
    block_successor_without_node(func_name, node, tail, head),
    block_dom(func_name, head, node).

  block_loop_node(func_name, head, node) :-
    block_back_egde(func_name, tail, head),
    node = tail.

  block_loop_node(func_name, head, node) :-
    block_back_egde(func_name, _, head),
    node = head.
}

.init CFG = _ControlFlowGraph
