// Copyright (c) 2023 Google LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#pragma once

#include "defines.dl"

.type type_sub_t <: number

.decl type (
    id: type_t,
    name: symbol,
    size: number,  // in bits
    family: symbol,
    family_id: type_sub_t
)
INPUT(type)

.decl type_array (
    id: type_sub_t,
    tid: type_t,
    size: number
)
INPUT(type_array)

.decl type_vector (
    id: type_sub_t,
    tid: type_t,
    size: number,
    scalable: symbol
)
INPUT(type_vector)

.decl type_struct (
    id: type_sub_t,
    packed: symbol,
    field_cnt: number
)
INPUT(type_struct)

.decl type_struct_field (
    id: type_sub_t,
    sid: type_sub_t,
    tid: type_t
)
INPUT(type_struct_field)

.decl type_func_ptr (
    id: type_sub_t,
    ret_tid: type_t,
    arg_cnt: number,
    is_var_arg: symbol
)
INPUT(type_func_ptr)

.decl type_func_ptr_arg (
    id: type_sub_t,
    func_ptr_id: type_sub_t,
    tid: type_t
)
INPUT(type_func_ptr_arg)

.decl type_ptr (
    id: type_sub_t,
    pointee: type_t,
    addr_space: number
)
INPUT(type_ptr)

.decl type_int (
    id: type_sub_t,
    bits: number
)
INPUT(type_int)
