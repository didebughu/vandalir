// Copyright (c) 2023 Google LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#pragma once

#include "defines.dl"
#include "input/types.dl"

#ifdef DEBUG_TYPE
#define OUTPUT(x) .output x
#else
#define OUTPUT(x)
#endif

.comp _Type {

  .decl is_struct(tid: type_t)
  OUTPUT(is_struct)
  
  is_struct(tid) :-
    type(tid, _, _, family, _),
    family = "struct".

  .decl is_array(tid: type_t)
  OUTPUT(is_array)

  is_array(tid) :-
    type(tid, _, _, family, _),
    family = "array".

  .decl is_vector(tid: type_t)
  OUTPUT(is_vector)

  // definitions
  is_vector(tid) :-
    type(tid, _, _, family, _),
    family = "vector".

  .decl is_int(tid: type_t)
  OUTPUT(is_int)

  is_int(tid) :-
    type(tid, _, _, family, _),
    family = "int".

  .decl name(tid: type_t, name: symbol)
  name(tid, name) :-
    type(tid, name, _, _, _).

  .decl size_in_bits(id: type_t, size: number)

  size_in_bits(id, size) :-
    type(id, _, size, _, _).

  .comp Pointer {
    .decl pointee(id: type_t, tid: type_t)
    OUTPUT(pointee)

    pointee(id, tid) :-
      type(id, _, _, family, family_id),
      family = "pointer",
      type_ptr(family_id, tid, _). 
  }

  .comp FuncPointer {
    .decl ret_type(id: type_t, tid: type_t)
    OUTPUT(ret_type)

    ret_type(id, tid) :-
      type(id, _, _, family, family_id),
      family = "func_ptr",
      type_func_ptr(family_id, tid, _, _). 
  }

  .comp Array {
    .decl get(id: type_t, tid: type_t, size: number)
    OUTPUT(get)

    get(id, tid, size) :-
      type(id, _, _, family, family_id),
      family = "array",
      type_array(family_id, tid, size). 
  }

  .comp Vector {
    .decl get(id: type_t, tid: type_t, size: number)
    OUTPUT(get)

    get(id, tid, size) :-
      type(id, _, _, family, family_id),
      family = "vector",
      type_vector(family_id, tid, size, _). 
  }

  .comp Struct {
    .decl get(id: type_t, field_num: number)
    OUTPUT(get)

    get(id, field_num) :-
      type(id, _, _, family, family_id),
      family = "struct",
      type_struct(family_id, _, field_num),
      field_num != -1.

    .decl ith_field(id: type_t, idx: number, tid: type_t)
    OUTPUT(ith_field)

    ith_field(id, idx, tid) :-
      type(id, _, _, family, family_id),
      family = "struct",
      type_struct(family_id, _, num),
      num != -1,  // ignore opaque structs
      idx < num,
      ith_field_impl(_, family_id, idx, tid).

    .decl ith_field_impl(id: type_sub_t,
                         family_id: type_sub_t,
                         idx: number,
                         tid: type_t)
    OUTPUT(ith_field_impl)
    ith_field_impl(id, family_id, idx, tid) :-
      idx=0,
      id = min sub_id: type_struct_field(sub_id, family_id, _),
      type_struct_field(id, family_id, tid).


    ith_field_impl(id, family_id, idx + 1, tid) :-
      ith_field_impl(id_prev, family_id, idx, _),
      id = min sub_id: {sub_id > id_prev, type_struct_field(sub_id, family_id, _) },
      type_struct_field(id, family_id, tid).
  }

  .init Pointer = Pointer
  .init Array = Array
  .init Vector = Vector
  .init Struct = Struct
}

.init Type = _Type
