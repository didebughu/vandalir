// Copyright (c) 2023 Google LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#pragma once

#include "defines.dl"
#include "input/block.dl"
#include "input/types.dl"
#include "instruction.dl"

#ifdef DEBUG_BLOCK
#define BLK_OUTPUT(x) OUTPUT_IMPL(x)
#else
#define BLK_OUTPUT(x)
#endif


.comp _Block {
  .decl get(fid: func_t, bid: block_t, name: name_t)
  BLK_OUTPUT(get)

  get(fid, bid, name) :-
    block(bid, fid, name, _).

  .decl terminator(fid: func_t, bid: block_t, iid: instr_t)
  terminator(fid, bid, iid) :-
    block(bid, fid, _, iid).

}
.init Block = _Block
