// Copyright (c) 2023 Google LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#pragma once

#include "defines.dl"
#include "input/instructions.dl"
#include "type.dl"
#include "operand.dl"
#include "function.dl"
#include "vreg_analysis.dl"

#ifdef DEBUG_INSTRUCTION
#define INSTR_OUTPUT(x) OUTPUT_IMPL(x)
#else
#define INSTR_OUTPUT(x)
#endif

#define UPPERBOUND_COND(x) \
  (x = "slt"; x = "sle"; x = "ult"; x = "ule")

#define SMALLER_COND(x) \
  (x = "slt"; x = "ult")

#define SMALLER_EQUAL_COND(x) \
  (x = "sle"; x = "ule")

#define LOWERBOUND_COND(x) \
  (x = "sgt"; x = "sge"; x = "ugt"; x = "uge")

#define BIGGER_COND(x) \
  (x = "sgt"; x = "ugt")

#define BIGGER_EQUAL_COND(x) \
  (x = "sge"; x = "uge")

#define EQUAL_COND(x) x = "eq"

#define NOT_EQUAL_COND(x) x = "ne"

.comp _Instruction {

  .decl is_integer_binary_ops(bid: block_t, iid: instr_t)
  INSTR_OUTPUT(is_integer_binary_ops)

  is_integer_binary_ops(bid, iid) :-
    instruction(iid, bid, _, opcode, _, _, _, _),
    (opcode = "add";
     opcode = "sub";
     opcode = "mul";
     opcode = "udiv";
     opcode = "sdiv";
     opcode = "urem";
     opcode = "srem").


  .decl is_bitwise_binary_ops(bid: block_t, iid: instr_t)
  INSTR_OUTPUT(is_bitwise_binary_ops)

  is_bitwise_binary_ops(bid, iid) :-
    instruction(iid, bid, _, opcode, _, _, _, _),
    (opcode = "and";
     opcode = "or";
     opcode = "xor";
     opcode = "shl";
     opcode = "lshr";
     opcode = "ashr").


  .decl is_floating_point_ops(bid: block_t, iid: instr_t)
  INSTR_OUTPUT(is_floating_point_ops)

  is_floating_point_ops(bid, iid) :-
    instruction(iid, bid, _, opcode, _, _, _, _),
    (opcode = "fadd";
     opcode = "fsub";
     opcode = "fmul";
     opcode = "fdiv";
     opcode = "frem";
     opcode = "fneg").


  .decl is_vector_ops(bid: block_t, iid: instr_t)
  INSTR_OUTPUT(is_vector_ops)

  is_vector_ops(bid, iid) :-
    instruction(iid, bid, _, opcode, _, _, _, _),
    (opcode = "extractelement";
     opcode = "insertelement";
     opcode = "shufflevector").


  .decl is_aggregate_ops(bid: block_t, iid: instr_t)
  INSTR_OUTPUT(is_aggregate_ops)

  is_aggregate_ops(bid, iid) :-
    instruction(iid, bid, _, opcode, _, _, _, _),
    (opcode = "extractvalue";
     opcode = "insertvalue").


  .decl is_memory_related_ops(bid: block_t, iid: instr_t)
  INSTR_OUTPUT(is_memory_related_ops)

  is_memory_related_ops(bid, iid) :-
    instruction(iid, bid, _, opcode, _, _, _, _),
    (opcode = "alloca";
     opcode = "load";
     opcode = "store";
     opcode = "fence";
     opcode = "cmpxchg";
     opcode = "atomicrmw";
     opcode = "getelementptr").


  .decl is_conversion_ops(bid: block_t, iid: instr_t)
  INSTR_OUTPUT(is_conversion_ops)

  is_conversion_ops(bid, iid) :-
    Conversation.get(iid, bid, _).


  .decl is_other_ops(bid: block_t, iid: instr_t)
  INSTR_OUTPUT(is_other_ops)

  is_other_ops(bid, iid) :-
    instruction(iid, bid, _, opcode, _, _, _, _),
    (opcode = "icmp";
     opcode = "fcmp";
     opcode = "phi";
     opcode = "select";
     opcode = "freeze";
     opcode = "call";
     opcode = "vaarg";
     opcode = "landingpad";
     opcode = "catchpad";
     opcode = "cleanuppad").


  .decl dest(id: instr_t, name: name_t)
  dest(id, name) :-
    instruction(id, _, name, _, _, _, _, _),
    name != "".

  .decl get(id: instr_t, bid: block_t,
            name: name_t, opcode: symbol)
  get(id, bid, name, opcode) :-
    instruction(id, bid, name, opcode, _, _, _, _).

  .comp Binary {
    .decl get(id: instr_t, bid: block_t, dest: name_t) overridable
    INSTR_OUTPUT(get)

    get(id, bid, dest) :-
      instruction(id, bid, dest, _, _, binary, _, _),
      binary = "true".

    .decl operands(id: instr_t, bid: block_t,
                   op0: operand_t, op1: operand_t, dest: name_t)
    INSTR_OUTPUT(operands)

    operands(id, bid, op0, op1, dest) :-
      instruction(id, bid, _, _, _, binary, _, opid),
      binary = "true",
      instruction_binary(opid, op0, op1, dest).
  }

  .comp Conversation {
    .decl get(id: instr_t, bid: block_t, dest: name_t) overridable
    INSTR_OUTPUT(get)
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      (opcode = "trunc";
       opcode = "zext";
       opcode = "sext";
       opcode = "fptrunc";
       opcode = "fpext";
       opcode = "fptoui";
       opcode = "fptosi";
       opcode = "uitofp";
       opcode = "sitofp";
       opcode = "ptrtoint";
       opcode = "inttoptr";
       opcode = "bitcast";
       opcode = "addrspacecast").

    .decl operands(id: instr_t, bid: block_t,
                   op: operand_t, tid: type_t,
                   dest: name_t)
    INSTR_OUTPUT(operands)

    operands(id, bid, op, tid, name) :-
      instruction(id, bid, _, _, _, _, unary, opid),
      unary = "true",
      instruction_unary(opid, op, tid, name).
  }

  .comp Cmp {
    .decl get(id: instr_t, bid: block_t, dest: name_t) overridable
    INSTR_OUTPUT(get)

    .decl operands(id: instr_t, pred: symbol, op1: operand_t, op2: operand_t)
    INSTR_OUTPUT(operands)
    operands(id, pred, op1, op2) :-
      instruction(id, _, _, _, _, _, _, opid),
      instruction_cmp(opid, pred, op1, op2, _).

    .decl op_vreg(id: instr_t, bid: block_t, vreg: name_t)
    INSTR_OUTPUT(op_vreg)

    op_vreg(id, bid, vreg) :-
      instruction(id, bid, _, _, _, _, _, opid),
      instruction_cmp(opid, _, op1, _, _),
      Operand.vreg(op1, vreg, _).

    op_vreg(id, bid, vreg) :-
      instruction(id, bid, _, _, _, _, _, opid),
      instruction_cmp(opid, _, _, op2, _),
      Operand.vreg(op2, vreg, _).
  }

  .comp Add : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "add".
  }

  .comp Sub : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "sub".
  }

  .comp Mul : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "mul".
  }

  .comp UDiv : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "udiv".
  }

  .comp SDiv : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "sdiv".
  }

  .comp URem : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "urem".
  }

  .comp SRem : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "srem".
  }

  .comp And : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "and".
  }

  .comp Or : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "or".
  }

  .comp Xor : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "xor".
  }

  .comp Shl : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "shl".
  }

  .comp LShr : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "lshr".
  }

  .comp AShr : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "ashr".
  }

  .comp FAdd : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "fadd".
  }

  .comp FSub : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "fsub".
  }

  .comp FMul : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "fmul".
  }

  .comp FDiv : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "fdiv".
  }

  .comp FRem : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "frem".
  }

  .comp FNeg : Binary {
    .override get
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "fneg".
  }

  .comp Load {
    .decl get(id: instr_t, bid: block_t, name: name_t, addr: operand_t)
    INSTR_OUTPUT(get)

    get(id, bid, name, addr) :-
      instruction(id, bid, name, opcode, _, _, _, family_id),
      opcode = "load",
      instruction_load(family_id, addr, name, _, _).
  }

  .comp Store {
    .decl get(id: instr_t, bid: block_t, addr: operand_t, value: operand_t)
    INSTR_OUTPUT(get)

    get(id, bid, addr, value) :-
      instruction(id, bid, _, opcode, _, _, _, family_id),
      opcode = "store",
      instruction_store(family_id, addr, value, _, _).
  }

  .comp Phi {
    .decl get(id: instr_t, bid: block_t, dest: name_t)
    get(id, bid, name) :-
      instruction(id, bid, name, opcode, _, _, _, _),
      opcode = "phi".

    .decl ith_operand(id: instr_t, idx: number, op: operand_t, dest: name_t)
    INSTR_OUTPUT(ith_operand)
    ith_operand(id, idx, op, dest) :-
      instruction(id, _, _, opcode, _, _, _, family_id),
      opcode = "phi",
      instruction_phi(family_id, _, _, values_num),
      idx < values_num,
      ith_operand_impl(_, family_id, idx, op, dest).

    .decl ith_operand_impl(id: instr_sub_t,
                           family_id: instr_sub_t,
                           idx: number,
                           op: operand_t,
                           dest: name_t)
    INSTR_OUTPUT(ith_operand_impl)
    ith_operand_impl(id, family_id, idx, op, dest) :-
      idx=0,
      instruction_phi_value(id, family_id, op, dest),
      !instruction_phi_value(id - 1, family_id, _, _).

    ith_operand_impl(id, family_id, idx + 1, op, dest) :-
      instruction_phi_value(id, family_id, op, dest),
      ith_operand_impl(id - 1, family_id, idx, _, _).
  }

  .comp Call {
    .decl get(id: instr_t, bid: block_t, dest: name_t, name: symbol,
              tid: type_t)
    INSTR_OUTPUT(get)

    get(id, bid, dest, name, tid) :-
      instruction(id, bid, _, opcode, _, _, _, family_id),
      opcode = "call",
      instruction_call(family_id, fname_op, _, dest, _),
      OperandUtil.name(fname_op, name, tid).

    .decl global_func(id: instr_t, bid: block_t, dest: name_t, name: symbol, tid: type_t)
    INSTR_OUTPUT(global_func)

    global_func(id, bid, dest, name, tid) :-
      instruction(id, bid, _, opcode, _, _, _, family_id),
      opcode = "call",
      instruction_call(family_id, fname_op, _, dest, _),
      Operand.global_ref(fname_op, name, tid).

    .decl ith_operand(id: instr_t, idx: number, op: operand_t)
    INSTR_OUTPUT(ith_operand)

    ith_operand(id, idx, op) :-
      instruction(id, _, _, opcode, _, _, _, family_id),
      opcode = "call",
      instruction_call(family_id, _, arg_num, _, _),
      idx < arg_num,
      ith_operand_impl(_, family_id, idx, op).

    .decl ith_operand_impl(id: instr_sub_t,
                           family_id: instr_sub_t,
                           idx: number,
                           op: operand_t)
    INSTR_OUTPUT(ith_operand_impl)
    ith_operand_impl(id, family_id, idx, op) :-
      idx=0,
      instruction_call_op(id, family_id, op),
      !instruction_call_op(id - 1, family_id, _).

    ith_operand_impl(id, family_id, idx + 1, op) :-
      instruction_call_op(id, family_id, op),
      ith_operand_impl(id - 1, family_id, idx, _).
  }

  .comp Alloca {
    .decl get(id: instr_t, bid: block_t,
              dest: name_t, tid: type_t, size: number)
    INSTR_OUTPUT(get)

    get(id, bid, dest, tid, size) :-
      instruction(id, bid, _, opcode, _, _, _, family_id),
      opcode = "alloca",
      instruction_alloca(family_id, tid, size_op, dest, _),
      Operand.int(size_op, size).
  }

  .comp GetElementPtr {
    .decl get(id: instr_t, bid: block_t, dest: name_t,
              addr: operand_t, num_idx: number)
    INSTR_OUTPUT(get)

    get(id, bid, dest, addr, num_idx) :-
      instruction(id, bid, _, opcode, _, _, _, family_id),
      opcode = "getelementptr",
      instruction_gep(family_id, addr, num_idx, dest, _).

    .decl ith_index(id: instr_t, idx: number, op: operand_t)
    INSTR_OUTPUT(ith_index)

    ith_index(id, idx, op) :-
      instruction(id, _, _, opcode, _, _, _, family_id),
      opcode = "getelementptr",
      instruction_gep(family_id, _, idx_num, _, _),
      idx < idx_num,
      ith_index_impl(_, family_id, idx, op).

    .decl ith_index_impl(id: instr_sub_t,
                         family_id: instr_sub_t,
                         idx: number,
                         op: operand_t)
    INSTR_OUTPUT(ith_index_impl)
    ith_index_impl(id, family_id, idx, op) :-
      idx=0,
      instruction_gep_index(id, family_id, op),
      !instruction_gep_index(id - 1, family_id, _).

    ith_index_impl(id, family_id, idx + 1, op) :-
      instruction_gep_index(id, family_id, op),
      ith_index_impl(id - 1, family_id, idx, _).

    // very often GEP has 1 or 2 indices, moreover 1st index is 0
    // in the 2-indices case.
    // This rule cover this custom situation.
    .decl index(id: instr_t, op: operand_t)

    index(id, op) :-
      instruction(id, _, _, opcode, _, _, _, family_id),
      opcode = "getelementptr",
      instruction_gep(family_id, _, idx_num, _, _),
      idx_num = 1,
      ith_index_impl(_, family_id, 0, op).

    index(id, op) :-
      instruction(id, _, _, opcode, _, _, _, family_id),
      opcode = "getelementptr",
      instruction_gep(family_id, _, idx_num, _, _),
      idx_num = 2,
      ith_index_impl(_, family_id, 0, op0),
      Operand.int(op0, op0_val),
      op0_val = 0,
      ith_index_impl(_, family_id, 1, op).

    .decl addr_size(id: instr_t, bid: block_t, name: name_t, size: number)
    INSTR_OUTPUT(addr_size)

    addr_size(id, bid, name, size) :-
      Block.get(fid, bid, _),
      Instruction.GetElementPtr.get(id, bid, _, addr_op, _),
      OperandUtil.name(addr_op, name, tid),
      Type.is_pointer(tid),
      InstructionAnalysis.is_instruction_before(id, iid_buff),
      VRegValueAnalysis.ptr_buff_size(fid, iid_buff, name, tid, size).

    addr_size(id, bid, name, size) :-
      Block.get(fid, bid, _),
      Instruction.GetElementPtr.get(id, bid, _, addr_op, _),
      OperandUtil.name(addr_op, name, tid),
      !Type.is_pointer(tid),
      InstructionAnalysis.is_instruction_before(id, iid_buff),
      VRegValueAnalysis.buff_size(fid, iid_buff, name, tid, size).
  }

  .comp ICmp : Cmp {
    get(id, bid, dest) :-
      instruction(id, bid, dest, opcode, _, _, _, _),
      opcode = "icmp".
  }

  .comp FCmp : Cmp {
    get(id, bid, dest) :-
      instruction(id, bid, dest, opcode, _, _, _, _),
      opcode = "fcmp".
  }

  .comp Br {
    .decl get(id: instr_t, bid: block_t, label: name_t)
    INSTR_OUTPUT(get)
    get(id, bid, label) :-
      instruction(id, bid, _, opcode, _, _, _, family_id),
      opcode = "br",
      instruction_br(family_id, label).
  }

  .comp BrCond {
    .decl get(id: instr_t,
              bid: block_t,
              cond: operand_t,
              true_label: name_t,
              false_label: name_t)
    INSTR_OUTPUT(get)
    get(id, bid, cond, true_label, false_label) :-
      instruction(id, bid, _, opcode, _, _, _, family_id),
      opcode = "condbr",
      instruction_condbr(family_id, cond, true_label, false_label).
  }

  .init Conversation = Conversation
  .init Binary = Binary

  .init Add = Add
  .init Sub = Sub
  .init Mul = Mul
  .init UDiv = UDiv
  .init SDiv = SDiv
  .init URem = URem
  .init SRem = SRem
  .init And = And
  .init Or = Or
  .init Xor = Xor
  .init Shl = Shl
  .init LShr = LShr
  .init AShr = AShr

  .init Load = Load
  .init Store = Store

  .init Phi = Phi
  .init Call = Call

  .init Alloca = Alloca
  .init GetElementPtr = GetElementPtr

  .init ICmp = ICmp
  .init FCmp = FCmp

  .init Br = Br
  .init BrCond = BrCond
}

.init Instruction = _Instruction
