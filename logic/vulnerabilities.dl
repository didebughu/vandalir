#include "vulnerabilities/buffer-overflow.dl"
#include "vulnerabilities/bo-in-loop.dl"
#include "vulnerabilities/bo-in-arrays.dl"
#include "vulnerabilities/out-of-bounds-read.dl"
#include "vulnerabilities/integer-overflow.dl"
#include "vulnerabilities/format-string.dl"
#include "vulnerabilities/dangerous-functions.dl"

//print results
.decl print_vulnerable(level: symbol, functionname: symbol, label: symbol, virtualregister: symbol, message: symbol)
.output print_vulnerable(delimiter=";")

print_vulnerable(LEVEL, FNAME, BBLOCK, VREG, MESSAGE) :- instruction(BID, IID, VREG, _), 
get_vulnerable(IID, LEVEL, MESSAGE), block(FID, BID, BBLOCK), function(FID, FNAME, _, _),
LEVEL="Vulnerability"
.



.decl get_vulnerable(instructionid: _instructionid, LEVEL: symbol, message: symbol)
get_vulnerable(IID, LEVEL, MESSAGE) :- buffer_overflow(IID, LEVEL, MESSAGE).
get_vulnerable(IID, LEVEL, MESSAGE) :- bo_in_arrays(IID, LEVEL, MESSAGE).
get_vulnerable(IID, LEVEL, MESSAGE) :- bo_in_loops(IID, LEVEL, MESSAGE).
get_vulnerable(IID, LEVEL, MESSAGE) :- out_of_bounds_read(IID, LEVEL, MESSAGE).
get_vulnerable(IID, LEVEL, MESSAGE) :- format_string_attacks(IID, LEVEL, MESSAGE).
get_vulnerable(IID, LEVEL, MESSAGE) :- integer_overflow(IID, LEVEL, MESSAGE).
get_vulnerable(IID, LEVEL, MESSAGE) :- dangerous_function(IID, LEVEL, MESSAGE).

