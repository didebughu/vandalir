//find equal memory location (alias analysis)
.decl memequals(functionid1: _functionid, memlocation1: symbol, 
functionid2: _functionid, memlocation2: symbol)
.output memequals(delimiter=",")

//case: (a <==> b) ==> (b <==> a)
memequals(FID1, LOC1, FID2, LOC2) :- 
memequals(FID2, LOC2, FID1, LOC1).

//case: [(a <==> x) && (x <==> b)] ==> (a <==> b)
memequals(FID1, LOC1, FID2, LOC2) :- 
memequals(FID1, LOC1, FIDX, LOCX),
memequals(FID2, LOC2, FIDX, LOCX)
.

//case load: (x = *a) && (a->b) ==> (x <==> b)
memequals(FID1, X, FID2, B) :- 
memlocation(FID1, X, _, _), 
memlocation(FID2, B, _, _),
instruction(BID, IID, VREG, OPC), block(FID1, BID, _), OPC = "load",
get_third_operand(IID, A), 
VREG = X,
points_to(FID1, A, FID2, B)
.

//case points-to: (a -> x && b -> x) ==> (a <==> b)
memequals(FID1, LOC1, FID2, LOC2) :- 
points_to(FID1, LOC1, FIDX, LOCX), 
points_to(FID2, LOC2, FIDX, LOCX).

/*
//TODO: is this bad/unnecessary?
//looks really, really bad
//case load pointer
memequals(FID1, LOC1, FID2, LOC2) :-
memlocation(FID1, LOC1, TYPE1, _), 
memlocation(FID2, LOC2, TYPE2, _),
instruction(BID, IID, LOC1, OPC), block(FID, BID, _), OPC = "load",
pointer_level(TYPE1, TYPE1_PLVL),
pointer_level(TYPE2, TYPE2_PLVL),
TYPE1_PLVL = TYPE2_PLVL,
TYPE1_PLVL > 0,
FID1 = FID,
FID2 = FID, 
get_third_operand(IID, LOC2).

//case store a pointer
//TODO: is this bad/unnecessary?
memequals(FID1, LOC1, FID2, LOC2) :- 
block(FID, BID, _),
instruction(BID, IID, _, OPC), OPC = "store",
get_second_operand(IID, LOC2),
get_fourth_operand(IID, LOC1),
memlocation(FID1, LOC1, TYPE1, _),
memlocation(FID2, LOC2, TYPE2, _),
pointer_level(TYPE1, TYPE1_PLVL),
pointer_level(TYPE2, TYPE2_PLVL),
TYPE1_PLVL = TYPE2_PLVL,
FID1 = FID,
FID2 = FID.
*/
//case conversion instruction
memequals(FID1, LOC1, FID2, LOC2) :-
instruction(BID, IID, VREG, _), block(FID, BID, _), 
is_conversion_instruction(IID),
get_first_operand(IID, VREG_ORIG),
LOC1 = VREG,
LOC2 = VREG_ORIG,
FID1 = FID,
FID2 = FID.

//case function return
memequals(FID1, LOC1, FID2, LOC2) :-
get_fid_for_call_instruction(FID, IID),
get_ret_register(FID, VREG_RETVAL),
instruction(BID, IID, VREG, _), block(FID_CALL, BID, _),
LOC1 = VREG_RETVAL,
LOC2 = VREG,
FID1 = FID,
FID2 = FID_CALL.

//case function arguments
memequals(FID1, LOC1, FID2, LOC2) :-
get_call_argument_and_function_register(_, CFID, CARG, FID, VREG, _),
FID1 = CFID, LOC1=CARG,
FID2 = FID, LOC2=VREG.

//case phi instruction first case
memequals(FID1, LOC1, FID2, LOC2) :-
block(FID1, BID, _),
instruction(BID, IID, LOC1, "phi"),
FID2 = FID1,
is_even(I),
get_ith_operand(IID, I, LOC2),
get_num_operands(IID, OPCOUNT),
I<=OPCOUNT,
is_vreg(LOC2).

//from here on the cases for array handling

//first cases, where specific element of array could be located

//case getelementptr equal the return register with the constructed path
memequals(FID1, LOC1, FID2, LOC2) :-
block(FID1, BID, _), 
FID1 = FID2, //equal functions 
instruction(BID, IID, LOC1, OPC), OPC = "getelementptr", //LOC 1 is GEP instruction
gep_str(IID, RESULTLOC),
LOC2 = RESULTLOC.

//case x <=> x.0
memequals(FID1, LOC1, FID2, LOC2) :-
memlocation(FID1, LOC1, _, _),
FID2 = FID1,
LOC2 = cat(LOC1, ".0")
.

//case x <=> x.0.0
memequals(FID1, LOC1, FID2, LOC2) :-
memlocation(FID1, LOC1, _, _),
FID2 = FID1,
LOC2 = cat(LOC1, ".0.0")
.


//case if x<=>y => x.z <=> y.z
memequals(FID1, LOC1, FID2, LOC2) :-
memlocation(FID1, X, _, _),
memlocation(FID2, Y, _, _),
memequals(FID1, X, FID2, Y),
anumber(Z),
NUM = to_string(Z),
LOC1 = cat(X, ".", NUM),
LOC2 = cat(Y, ".", NUM),
memlocation(FID1, LOC1, _, _)
.

/**
//case if x<=>y => x.z <=> y.z
memequals(FID1, LOC1, FID2, LOC2) :-
memequals(FID1, X, FID2, Y),
X != Y,
LOC1 = cat(X, ".", Z),
LOC2 = cat(Y, ".", Z),
X = substr(LOC1, 0, @get_before_last_dot(LOC1)),
Y = substr(LOC2, 0, @get_before_last_dot(LOC2)),
memequals(FID1, LOC1, _, _),
memequals(FID2, LOC2, _, _),
Z = @get_behind_last_dot(LOC1),
is_vreg(X),
is_vreg(Y)
.
*/

//help relations

//wrapper around get_gep_concatenated_memloc_str, that sets correct level and removes useless results
.decl gep_str(instructionid: _instructionid, result: symbol)
.output gep_str
//case depth = 1 ==> keep leading zero index
gep_str(IID, RES) :-
get_num_operands(IID, MAXNUM),
LEVEL = MAXNUM-1,
get_gep_concatenated_memloc_str(IID, LEVEL, RES),
contains(".", RES),
!is_struct(RES),
!is_structpointer(RES),
DEPTH = @get_num_dots(RES),
DEPTH = 1
.

//case depth > 1 ==> no leading zero
gep_str(IID, RES) :-
get_num_operands(IID, MAXNUM),
LEVEL = MAXNUM-1,
get_gep_concatenated_memloc_str(IID, LEVEL, RES),
contains(".", RES),
!is_struct(RES),
!is_structpointer(RES),
DEPTH = @get_num_dots(RES),
DEPTH > 1,
INDICES = @get_behind_dot(RES),
FIRSTINDEX = substr(INDICES, 0, 2),
FIRSTINDEX != "0."
.
//case depth > 1 ==> remove leading zero index
gep_str(IID, RESULT) :-
get_num_operands(IID, MAXNUM),
LEVEL = MAXNUM-1,
get_gep_concatenated_memloc_str(IID, LEVEL, RES),
contains(".", RES),
!is_struct(RES),
!is_structpointer(RES),
DEPTH = @get_num_dots(RES),
DEPTH > 1,
INDICES = @get_behind_dot(RES),
FIRSTINDEX = substr(INDICES, 0, 2),
FIRSTINDEX = "0.",
NEWINDICES = substr(INDICES, 2, strlen(INDICES)),
BASEREGISTER = substr(RES, 0, @get_before_dot(RES)),
RESULT = cat(BASEREGISTER, ".", NEWINDICES)
.


.decl get_gep_concatenated_memloc_str(instructionid: _instructionid, level: number, result: symbol)
//.output get_gep_concatenated_memloc_str
get_gep_concatenated_memloc_str(IID, LEVEL, RES) :-
LEVEL = 1, 
instruction(_, IID, _, _),
get_first_operand(IID, DATAOBJ),
RES = DATAOBJ
.

//case numeric operand
get_gep_concatenated_memloc_str(IID, LEVEL, RES) :-
get_num_operands(IID, MAXOP),
LEVEL>1, 
LEVEL<=MAXOP-1, //last operand is reserved for return type info
get_gep_concatenated_memloc_str(IID, LEVEL-1, BASELOC),
get_ith_operand(IID, LEVEL, NEWINDEX),
is_numeric(NEWINDEX),
RES = cat(cat(BASELOC, "."), NEWINDEX)
.

//case non-numeric operand, but can be evaluated via get_int_by_vreg
get_gep_concatenated_memloc_str(IID, LEVEL, RES) :-
instruction(BID, IID, _, _),
block(FID, BID, _),
get_num_operands(IID, MAXOP),
LEVEL>1, 
LEVEL<=MAXOP-1, //last operand is reserved for return type info
get_gep_concatenated_memloc_str(IID, LEVEL-1, BASELOC),
get_ith_operand(IID, LEVEL, NEWINDEX),
!is_numeric(NEWINDEX),
is_vreg(NEWINDEX),
get_int_by_vreg(NEWINDEXNUMBER, FID, NEWINDEX),
NEWINDEXNUMBERSTR = to_string(NEWINDEXNUMBER),
is_numeric(NEWINDEXNUMBERSTR),
RES = cat(cat(BASELOC, "."), NEWINDEXNUMBERSTR)
.

//case non-numeric operand, not evaluated
//removed because only numeric operands are of interest
/*
get_gep_concatenated_memloc_str(IID, LEVEL, RES) :-
get_num_operands(IID, MAXOP),
LEVEL>1, 
LEVEL<=MAXOP-1, //last operand is reserved for return type info
get_gep_concatenated_memloc_str(IID, LEVEL-1, BASELOC),
get_ith_operand(IID, LEVEL, NEWINDEX),
!is_numeric(NEWINDEX),
is_vreg(NEWINDEX),
RES = cat(cat(BASELOC, "."), NEWINDEX)
.
*/


//get the vreg of all return instructions of one function
.decl get_ret_register(functionid: _functionid, returnregister: symbol)
//.output get_ret_register(delimiter=",")
get_ret_register(FID, RREG) :- instruction(BID, IID, _, OPC), block(FID, BID, _), 
OPC = "ret", get_first_operand(IID, RREG), is_vreg(RREG).


.decl get_call_argument_and_function_register(instructionid: _instructionid, caller_functionid: _functionid, call_arg: symbol, 
called_functionid: _functionid, functionreg: symbol, argumenttype: symbol)
//.output get_call_argument_and_function_register(delimiter=",")
get_call_argument_and_function_register(IID, CFID, CARG, FID, VREG, ARGTYPE) :- 
instruction(BID, IID, _, _), block(CFID, BID, _), is_call_instruction(IID),
get_function_for_call_instruction(FNAME, IID),
function(FID, FNAME, "define", _), //only get self defined functions
get_ith_argument_register(FID, ARGNUM, _, VREG, ARGTYPE),
get_ith_call_argument(IID, ARGNUM, CARG), is_vreg(CARG).


.decl get_ith_argument_register(functionid: _functionid, i:number, argid:_argumentid, argument: _vreg, argumenttype: symbol)
//.output get_ith_argument_register(delimiter=",")
get_ith_argument_register(FID, I, ARGID, VREG, ARGTYPE) :- argument(FID, ARGID, VREG, ARGTYPE), I = 1, !argument(FID, ARGID-1, _, _). 
get_ith_argument_register(FID, I, ARGID, VREG, ARGTYPE) :- argument(FID, ARGID, VREG, ARGTYPE), I > 1,
I = I2+1, get_ith_argument_register(FID, I2, ARGID-1, _, _).

.decl get_ith_call_argument(instructionid: _instructionid, i:number, val: symbol)
//.output get_ith_call_argument(delimiter=",")
get_ith_call_argument(IID, I, VAL) :- 
is_call_instruction(IID), 
get_num_operands(IID, ARGNUM2), ARGNUM = ARGNUM2-1,
get_ith_operand(IID, I, VAL),
I<=ARGNUM.
