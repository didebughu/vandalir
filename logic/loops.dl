//loop detection

//Edge going upward in CFG
.decl loopedge(functionid: _functionid, startblock: _blockid, endblock: _blockid)
loopedge(FID, START, END) :- edge(FID, START, END), START>END.

//detect loopCondition
.decl loopCondition(functionid: _functionid, edgestart: _blockid, edgeend: _blockid, conditionInstruction: _instructionid, type: symbol)
//.output loopCondition(delimiter=",")

//case foot-controlled
loopCondition(FID, ESTART, EEND, CONDITION, TYPE) :-
loopedge(FID, ESTART, EEND),
last_instruction_in_block(ESTART, IID),
get_num_operands(IID, 3),
CONDITION = IID,
TYPE = "foot-controlled"
.

//case head-controlled
loopCondition(FID, ESTART, EEND, CONDITION, TYPE) :-
loopedge(FID, ESTART, EEND),
last_instruction_in_block(ESTART, IID),
get_num_operands(IID, 1),
last_instruction_in_block(EEND, HEADIID),
get_num_operands(HEADIID, 3),
CONDITION = HEADIID,
TYPE = "head-controlled"
.

//all loops
.decl loop(functionid: _functionid, conditionBlock: _blockid, type: symbol)
//.output loop(delimiter=",")
loop(FID, CONDITION, TYPE) :- 
loopCondition(FID, _, _, CONDITIONID, TYPE), 
instruction(CONDITION, CONDITIONID, _, _)
.

//loops with paths
.decl loop_with_paths(conditionBlock: _blockid)
//.output loop_with_paths(delimiter=",")
loop_with_paths(CB) :- 
loop(_, CB, _),
COUNTBB = count : { loopBody(CB, _) },
COUNTBB > 1
.

//nested loops
.decl nested_loop(conditionBlock: _blockid)
//.output nested_loop(delimiter=",")
nested_loop(CB) :-
loop(_, CB, _),
loopBody(X, BODYX),
X != CB,
CB = BODYX
.

//the 4 loop types (see https://www.sciencedirect.com/science/article/pii/S0167404819301634)
.decl loop_sn(conditionBlock: _blockid)
loop_sn(CB) :- loop(_, CB, _), !nested_loop(CB), !loop_with_paths(CB).

.decl loop_sp(conditionBlock: _blockid)
loop_sp(CB) :- loop(_, CB, _), !nested_loop(CB), loop_with_paths(CB).

.decl loop_nn(conditionBlock: _blockid)
loop_nn(CB) :- loop(_, CB, _), nested_loop(CB), !loop_with_paths(CB).

.decl loop_np(conditionBlock: _blockid)
loop_np(CB) :- loop(_, CB, _), nested_loop(CB), loop_with_paths(CB).


//enumerates all blocks within loop without the condition block
.decl loopBody(conditionBlock: _blockid, bodyBlock: _blockid)
//.output loopBody(delimiter=",")
loopBody(CONDBLOCK, BODY) :- loopBodyWithCondition(CONDBLOCK, BODY), CONDBLOCK != BODY.


//enumerates all blocks within loop including the confition block
.decl loopBodyWithCondition(conditionBlock: _blockid, bodyBlock: _blockid)
//.output loopBodyWithCondition(delimiter=",")
loopBodyWithCondition(CONDBLOCK, BODY) :- 
loopCondition(_, EDGESTART, EDGEEND, CONDITIONID, _),
instruction(CONDBLOCK, CONDITIONID, _, _),
downwardPath(_, EDGEEND, X), BODY = X,
X<=EDGESTART
.

loopBodyWithCondition(CONDBLOCK, BODY) :- 
loopCondition(_, EDGESTART, EDGEEND, CONDITIONID, _),
instruction(CONDBLOCK, CONDITIONID, _, _), 
downwardPath(_, EDGEEND, X), BODY = EDGEEND,
X<=EDGESTART
.

loopBodyWithCondition(CONDBLOCK, BODY) :- 
loopCondition(_, EDGESTART, EDGEEND, CONDITIONID, _),
instruction(CONDBLOCK, CONDITIONID, _, _), 
downwardPath(_, X, EDGESTART), BODY = EDGESTART,
X>=EDGEEND
.

loopBodyWithCondition(CONDBLOCK, BODY) :- 
loopCondition(_, EDGESTART, EDGEEND, CONDITIONID, _), 
instruction(CONDBLOCK, CONDITIONID, _, _),
downwardPath(_, X, EDGESTART), BODY = X,
X>=EDGEEND
.


//detect loop variables (variables that determine the exit condition of a loop)

.decl loop_variable(conditionBlock: _blockid, functionid: _functionid, loopVariable: symbol)
//.output loop_variable(delimiter=",")
//case: condition block, direct integer i32
loop_variable(CB, FID, VREGLV) :- 
block(FID, CB, _),
loop(FID, CB, _),
instruction(CB, IID, _, "icmp"),
get_second_operand(IID, VREGLV),
//check that it is an i32
memlocation(FID, VREGLV, TYPE, _),
TYPE = "i32"
.

//case: condition block, direct integer i64
loop_variable(CB, FID, VREGLV) :- 
block(FID, CB, _),
loop(FID, CB, _),
instruction(CB, IID, _, "icmp"),
get_second_operand(IID, VREGLV),
//check that it is an i64
memlocation(FID, VREGLV, TYPE, _),
TYPE = "i64"
.

//case: condition block, pointer to string is loop variable
loop_variable(CB, FID, VREGLV) :- 
block(FID, CB, _),
loop(FID, CB, _),
instruction(CB, IID, _, "icmp"),
get_second_operand(IID, VREGLOAD),
//check that it is a char
memlocation(FID, VREGLOAD, TYPE, _),
TYPE = "i8",
instruction(CB, IIDLOAD, VREGLOAD, "load"),
get_second_operand(IIDLOAD, VREGLVTYPE),
is_pointer(VREGLVTYPE),
get_third_operand(IIDLOAD, VREGLV)
.

//TODO: add (2) break accordingly
